/**
 * Background Sync API –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–∫—É–ø–∫–∏ –æ—Ñ–ª–∞–π–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
 */

export interface PendingPurchase {
  id: string;
  gameId: number;
  gameName: string;
  price: number;
  timestamp: number;
  userId?: number;
  paymentMethod?: string;
}

const PENDING_PURCHASES_KEY = 'pending_purchases';
const SYNC_TAG = 'sync-purchases';

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export async function registerBackgroundSync(): Promise<boolean> {
  if (!('serviceWorker' in navigator) || !('SyncManager' in window)) {
    console.warn('Background Sync –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    return false;
  }

  try {
    const registration = await navigator.serviceWorker.ready;
    await registration.sync.register(SYNC_TAG);
    console.log('Background Sync –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Background Sync:', error);
    return false;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function savePendingPurchase(purchase: Omit<PendingPurchase, 'id' | 'timestamp'>): Promise<void> {
  const pendingPurchase: PendingPurchase = {
    ...purchase,
    id: `purchase_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    timestamp: Date.now(),
  };

  const existing = await getPendingPurchases();
  existing.push(pendingPurchase);
  
  localStorage.setItem(PENDING_PURCHASES_KEY, JSON.stringify(existing));
  
  await registerBackgroundSync();
  
  console.log('–ü–æ–∫—É–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', pendingPurchase);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
 */
export async function getPendingPurchases(): Promise<PendingPurchase[]> {
  try {
    const data = localStorage.getItem(PENDING_PURCHASES_KEY);
    return data ? JSON.parse(data) : [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫:', error);
    return [];
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–∫—É–ø–∫—É
 */
export async function removePendingPurchase(id: string): Promise<void> {
  const existing = await getPendingPurchases();
  const filtered = existing.filter(p => p.id !== id);
  localStorage.setItem(PENDING_PURCHASES_KEY, JSON.stringify(filtered));
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
 */
export async function clearPendingPurchases(): Promise<void> {
  localStorage.removeItem(PENDING_PURCHASES_KEY);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
export async function sendPurchaseToServer(purchase: PendingPurchase): Promise<boolean> {
  try {
    const response = await fetch('/api/purchases', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        game_id: purchase.gameId,
        user_id: purchase.userId || 1,
        payment_method: purchase.paymentMethod || 'card',
        amount: purchase.price,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫—É–ø–∫–∏:', error);
    return false;
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
 */
export async function syncPendingPurchases(): Promise<{ success: number; failed: number }> {
  const pending = await getPendingPurchases();
  
  if (pending.length === 0) {
    return { success: 0, failed: 0 };
  }

  console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${pending.length} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫...`);

  let success = 0;
  let failed = 0;

  for (const purchase of pending) {
    const sent = await sendPurchaseToServer(purchase);
    
    if (sent) {
      await removePendingPurchase(purchase.id);
      success++;
      console.log(`‚úÖ –ü–æ–∫—É–ø–∫–∞ ${purchase.gameName} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
    } else {
      failed++;
      console.log(`‚ùå –ü–æ–∫—É–ø–∫–∞ ${purchase.gameName} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
    }
  }

  return { success, failed };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
 */
export async function hasPendingPurchases(): Promise<boolean> {
  const pending = await getPendingPurchases();
  return pending.length > 0;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
 */
export async function getPendingPurchasesCount(): Promise<number> {
  const pending = await getPendingPurchases();
  return pending.length;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Background Sync –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
 */
export async function initBackgroundSync(): Promise<void> {
  if (!('serviceWorker' in navigator)) {
    return;
  }

  window.addEventListener('online', async () => {
    console.log('üåê –°–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    const count = await getPendingPurchasesCount();
    if (count > 0) {
      const result = await syncPendingPurchases();
      
      if (result.success > 0) {
        showSyncNotification(result.success, result.failed);
      }
    }
  });

  const initialCount = await getPendingPurchasesCount();
  if (initialCount > 0 && navigator.onLine) {
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${initialCount} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...`);
    await syncPendingPurchases();
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
function showSyncNotification(success: number, failed: number): void {
  if ('Notification' in window && Notification.permission === 'granted') {
    const message = failed > 0
      ? `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${success} –ø–æ–∫—É–ø–æ–∫, ${failed} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å`
      : `–í—Å–µ –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (${success})`;

    new Notification('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
      body: message,
      icon: '/icon-192.png',
      badge: '/icon-192.png',
      tag: 'sync-complete',
    });
  }
}
