/**
 * –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 * –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –¶–ë –†–§ API + fallback —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫—É—Ä—Å—ã
 */

export interface ExchangeRates {
  USD: number;
  EUR: number;
  CNY: number;
  TRY: number;
  UAH: number;
  lastUpdated: number;
}

// –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–∞ 04.10.2025
const FALLBACK_RATES: ExchangeRates = {
  USD: 82.0,   // –î–æ–ª–ª–∞—Ä –°–®–ê
  EUR: 96.0,   // –ï–≤—Ä–æ
  CNY: 11.5,   // –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å
  TRY: 2.48,   // –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞ (1 TRY = 2.48 RUB)
  UAH: 2.05,   // –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞ (1 UAH = 2.05 RUB)
  lastUpdated: Date.now(),
};

const CACHE_KEY = 'exchange_rates_cache';
const CACHE_DURATION = 4 * 60 * 60 * 1000; // 4 —á–∞—Å–∞

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
 */
export async function getExchangeRates(): Promise<ExchangeRates> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cached = getCachedRates();
  if (cached && Date.now() - cached.lastUpdated < CACHE_DURATION) {
    return cached;
  }

  // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã
  try {
    const rates = await fetchExchangeRates();
    saveRatesToCache(rates);
    return rates;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à –∏–ª–∏ fallback
    return cached || FALLBACK_RATES;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ –∫—ç—à–∞
 */
function getCachedRates(): ExchangeRates | null {
  try {
    const cached = localStorage.getItem(CACHE_KEY);
    if (!cached) return null;
    
    const rates: ExchangeRates = JSON.parse(cached);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à (max 24 —á–∞—Å–∞)
    if (Date.now() - rates.lastUpdated > 24 * 60 * 60 * 1000) {
      return null;
    }
    
    return rates;
  } catch (error) {
    return null;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å—ã –≤ –∫—ç—à
 */
function saveRatesToCache(rates: ExchangeRates): void {
  try {
    localStorage.setItem(CACHE_KEY, JSON.stringify(rates));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error);
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã —Å –¶–ë –†–§ API
 */
async function fetchExchangeRates(): Promise<ExchangeRates> {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –¶–ë –†–§
  const response = await fetch('https://www.cbr-xml-daily.ru/daily_json.js');
  
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}`);
  }

  const data = await response.json();
  const valutes = data.Valute;

  return {
    USD: valutes.USD?.Value || FALLBACK_RATES.USD,
    EUR: valutes.EUR?.Value || FALLBACK_RATES.EUR,
    CNY: valutes.CNY?.Value || FALLBACK_RATES.CNY,
    TRY: valutes.TRY?.Value / 10 || FALLBACK_RATES.TRY, // –¶–ë –¥–∞–µ—Ç –∑–∞ 10 –ª–∏—Ä
    UAH: valutes.UAH?.Value / 10 || FALLBACK_RATES.UAH, // –¶–ë –¥–∞–µ—Ç –∑–∞ 10 –≥—Ä–∏–≤–µ–Ω
    lastUpdated: Date.now(),
  };
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±–ª–∏ –≤ –≤–∞–ª—é—Ç—É
 */
export function convertFromRUB(amountRUB: number, currency: keyof Omit<ExchangeRates, 'lastUpdated'>, rates: ExchangeRates): number {
  const rate = rates[currency];
  return Number((amountRUB / rate).toFixed(2));
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ —Ä—É–±–ª–∏
 */
export function convertToRUB(amount: number, currency: keyof Omit<ExchangeRates, 'lastUpdated'>, rates: ExchangeRates): number {
  const rate = rates[currency];
  return Math.round(amount * rate);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É —Å —Å–∏–º–≤–æ–ª–æ–º –≤–∞–ª—é—Ç—ã
 */
export function formatCurrency(amount: number, currency: string): string {
  const symbols: Record<string, string> = {
    RUB: '‚ÇΩ',
    USD: '$',
    EUR: '‚Ç¨',
    CNY: '¬•',
    TRY: '‚Ç∫',
    UAH: '‚Ç¥',
  };

  const symbol = symbols[currency] || currency;
  
  // –î–ª—è —Ä—É–±–ª–µ–π, –≥—Ä–∏–≤–Ω—ã - —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ
  if (['RUB', 'UAH'].includes(currency)) {
    return `${amount.toLocaleString('ru-RU')}${symbol}`;
  }
  
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–¥
  return `${symbol}${amount.toLocaleString('en-US')}`;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
 */
export function getRateChange(currency: keyof Omit<ExchangeRates, 'lastUpdated'>, currentRates: ExchangeRates): {
  change: number;
  percent: number;
  isPositive: boolean;
} {
  const current = currentRates[currency];
  const previous = FALLBACK_RATES[currency];
  
  const change = Number((current - previous).toFixed(2));
  const percent = Number(((change / previous) * 100).toFixed(2));
  
  return {
    change,
    percent,
    isPositive: change >= 0,
  };
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
 */
export async function initExchangeRates(): Promise<void> {
  try {
    await getExchangeRates();
    console.log('‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç
 */
export function getCurrencyName(code: string): string {
  const names: Record<string, string> = {
    RUB: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
    USD: '–î–æ–ª–ª–∞—Ä –°–®–ê',
    EUR: '–ï–≤—Ä–æ',
    CNY: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å',
    TRY: '–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞',
    UAH: '–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞',
  };
  
  return names[code] || code;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –≤–∞–ª—é—Ç—ã
 */
export function getCurrencyFlag(code: string): string {
  const flags: Record<string, string> = {
    RUB: 'üá∑üá∫',
    USD: 'üá∫üá∏',
    EUR: 'üá™üá∫',
    CNY: 'üá®üá≥',
    TRY: 'üáπüá∑',
    UAH: 'üá∫üá¶',
  };
  
  return flags[code] || 'üåç';
}