/**
 * Periodic Background Sync API –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Å–∞–π—Ç –∑–∞–∫—Ä—ã—Ç
 */

export interface SyncConfig {
  minInterval: number; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  tag: string; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
}

const SYNC_CONFIGS = {
  GAMES_CATALOG: {
    tag: 'sync-games-catalog',
    minInterval: 12 * 60 * 60 * 1000, // 12 —á–∞—Å–æ–≤
  },
  PRICE_UPDATES: {
    tag: 'sync-price-updates',
    minInterval: 6 * 60 * 60 * 1000, // 6 —á–∞—Å–æ–≤
  },
  NEW_RELEASES: {
    tag: 'sync-new-releases',
    minInterval: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
  },
  DISCOUNTS: {
    tag: 'sync-discounts',
    minInterval: 3 * 60 * 60 * 1000, // 3 —á–∞—Å–∞
  },
} as const;

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Periodic Background Sync
 */
export function isPeriodicSyncSupported(): boolean {
  return 'serviceWorker' in navigator && 'periodicSync' in ServiceWorkerRegistration.prototype;
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export async function registerPeriodicSync(
  config: SyncConfig
): Promise<{ success: boolean; error?: string }> {
  if (!isPeriodicSyncSupported()) {
    console.warn('Periodic Background Sync –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    return { success: false, error: 'not_supported' };
  }

  try {
    const registration = await navigator.serviceWorker.ready;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    const status = await navigator.permissions.query({
      name: 'periodic-background-sync' as PermissionName,
    });

    if (status.state === 'denied') {
      console.warn('Periodic Background Sync –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      return { success: false, error: 'permission_denied' };
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    await (registration as any).periodicSync.register(config.tag, {
      minInterval: config.minInterval,
    });

    console.log(`Periodic Sync –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${config.tag} (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${config.minInterval}ms)`);
    return { success: true };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Periodic Sync:', error);
    return { success: false, error: String(error) };
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export async function unregisterPeriodicSync(tag: string): Promise<boolean> {
  if (!isPeriodicSyncSupported()) {
    return false;
  }

  try {
    const registration = await navigator.serviceWorker.ready;
    await (registration as any).periodicSync.unregister(tag);
    console.log(`Periodic Sync –æ—Ç–º–µ–Ω–µ–Ω–∞: ${tag}`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã Periodic Sync:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π
 */
export async function getRegisteredSyncs(): Promise<string[]> {
  if (!isPeriodicSyncSupported()) {
    return [];
  }

  try {
    const registration = await navigator.serviceWorker.ready;
    const tags = await (registration as any).periodicSync.getTags();
    return tags;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π:', error);
    return [];
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π
 */
export async function initPeriodicSync(): Promise<void> {
  if (!isPeriodicSyncSupported()) {
    console.log('Periodic Background Sync –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback (setInterval)');
    initFallbackSync();
    return;
  }

  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Periodic Background Sync...');

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–≥—Ä
  await registerPeriodicSync(SYNC_CONFIGS.GAMES_CATALOG);

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
  await registerPeriodicSync(SYNC_CONFIGS.PRICE_UPDATES);

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤
  await registerPeriodicSync(SYNC_CONFIGS.NEW_RELEASES);

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫–∏–¥–æ–∫
  await registerPeriodicSync(SYNC_CONFIGS.DISCOUNTS);

  const registered = await getRegisteredSyncs();
  console.log('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', registered);
}

/**
 * Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Periodic Sync
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–π setInterval
 */
function initFallbackSync(): void {
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
  setInterval(() => {
    if (navigator.onLine) {
      syncGamesCatalog();
    }
  }, SYNC_CONFIGS.GAMES_CATALOG.minInterval);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
  setInterval(() => {
    if (navigator.onLine) {
      syncPriceUpdates();
    }
  }, SYNC_CONFIGS.PRICE_UPDATES.minInterval);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
  setInterval(() => {
    if (navigator.onLine) {
      syncNewReleases();
    }
  }, SYNC_CONFIGS.NEW_RELEASES.minInterval);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–∏–¥–æ–∫ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
  setInterval(() => {
    if (navigator.onLine) {
      syncDiscounts();
    }
  }, SYNC_CONFIGS.DISCOUNTS.minInterval);

  console.log('Fallback —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (setInterval)');
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–≥—Ä
 */
async function syncGamesCatalog(): Promise<void> {
  console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–≥—Ä...');
  
  try {
    const response = await fetch('/api/games?limit=1000');
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    
    const games = await response.json();
    localStorage.setItem('games_cache', JSON.stringify(games));
    localStorage.setItem('games_cache_timestamp', Date.now().toString());
    
    console.log(`‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: ${games.length} –∏–≥—Ä`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    window.dispatchEvent(new CustomEvent('catalog-updated', { detail: { count: games.length } }));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω
 */
async function syncPriceUpdates(): Promise<void> {
  console.log('üí∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω...');
  
  try {
    const lastSync = localStorage.getItem('price_sync_timestamp');
    const url = lastSync 
      ? `/api/games/price-updates?since=${lastSync}`
      : '/api/games/price-updates';
    
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    
    const updates = await response.json();
    
    if (updates.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏–≥—Ä —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
      const cachedGames = JSON.parse(localStorage.getItem('games_cache') || '[]');
      updates.forEach((update: any) => {
        const game = cachedGames.find((g: any) => g.id === update.game_id);
        if (game) {
          game.price = update.new_price;
        }
      });
      
      localStorage.setItem('games_cache', JSON.stringify(cachedGames));
      localStorage.setItem('price_sync_timestamp', Date.now().toString());
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: ${updates.length}`);
      
      window.dispatchEvent(new CustomEvent('prices-updated', { detail: { count: updates.length } }));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω:', error);
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤
 */
async function syncNewReleases(): Promise<void> {
  console.log('üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤...');
  
  try {
    const lastCheck = localStorage.getItem('new_releases_check_timestamp');
    const url = lastCheck 
      ? `/api/games/new-releases?since=${lastCheck}`
      : '/api/games/new-releases?days=7';
    
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    
    const newGames = await response.json();
    
    if (newGames.length > 0) {
      localStorage.setItem('new_releases', JSON.stringify(newGames));
      localStorage.setItem('new_releases_check_timestamp', Date.now().toString());
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∏–≥—Ä: ${newGames.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∏–≥—Ä–∞—Ö
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification(`üéÆ ${newGames.length} –Ω–æ–≤—ã—Ö –∏–≥—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!`, {
          body: newGames.slice(0, 3).map((g: any) => g.name).join(', '),
          icon: '/icon-192.png',
          badge: '/icon-192.png',
          tag: 'new-releases',
        });
      }
      
      window.dispatchEvent(new CustomEvent('new-releases', { detail: { games: newGames } }));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤:', error);
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∫–∏–¥–æ–∫
 */
async function syncDiscounts(): Promise<void> {
  console.log('üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–∫–∏–¥–æ–∫...');
  
  try {
    const response = await fetch('/api/games/discounts?active=true');
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    
    const discounts = await response.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    const wishlistDiscounts = discounts.filter((d: any) => 
      wishlist.includes(d.game_id)
    );
    
    if (wishlistDiscounts.length > 0) {
      console.log(`‚úÖ –°–∫–∏–¥–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: ${wishlistDiscounts.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification('üí∞ –°–∫–∏–¥–∫–∏ –Ω–∞ –∏–≥—Ä—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!', {
          body: `${wishlistDiscounts.length} –∏–≥—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ ${Math.max(...wishlistDiscounts.map((d: any) => d.discount_percent))}%`,
          icon: '/icon-192.png',
          badge: '/icon-192.png',
          tag: 'wishlist-discounts',
        });
      }
    }
    
    localStorage.setItem('active_discounts', JSON.stringify(discounts));
    localStorage.setItem('discounts_sync_timestamp', Date.now().toString());
    
    window.dispatchEvent(new CustomEvent('discounts-updated', { 
      detail: { 
        total: discounts.length,
        wishlist: wishlistDiscounts.length 
      } 
    }));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∏–¥–æ–∫:', error);
  }
}

/**
 * –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ–≥–æ
 */
export async function manualSyncAll(): Promise<{
  catalog: boolean;
  prices: boolean;
  releases: boolean;
  discounts: boolean;
}> {
  console.log('üîÑ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  const results = {
    catalog: false,
    prices: false,
    releases: false,
    discounts: false,
  };

  try {
    await syncGamesCatalog();
    results.catalog = true;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', e);
  }

  try {
    await syncPriceUpdates();
    results.prices = true;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω:', e);
  }

  try {
    await syncNewReleases();
    results.releases = true;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–∏–∑–æ–≤:', e);
  }

  try {
    await syncDiscounts();
    results.discounts = true;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∏–¥–æ–∫:', e);
  }

  return results;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π
 */
export function getSyncStatus(): {
  catalog: { timestamp: number | null; age: string };
  prices: { timestamp: number | null; age: string };
  releases: { timestamp: number | null; age: string };
  discounts: { timestamp: number | null; age: string };
} {
  const now = Date.now();
  
  const getAge = (timestamp: string | null): string => {
    if (!timestamp) return '–ù–∏–∫–æ–≥–¥–∞';
    const age = now - parseInt(timestamp);
    const hours = Math.floor(age / (60 * 60 * 1000));
    if (hours < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (hours === 1) return '1 —á–∞—Å –Ω–∞–∑–∞–¥';
    if (hours < 24) return `${hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`;
    const days = Math.floor(hours / 24);
    return `${days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
  };

  return {
    catalog: {
      timestamp: parseInt(localStorage.getItem('games_cache_timestamp') || '0') || null,
      age: getAge(localStorage.getItem('games_cache_timestamp')),
    },
    prices: {
      timestamp: parseInt(localStorage.getItem('price_sync_timestamp') || '0') || null,
      age: getAge(localStorage.getItem('price_sync_timestamp')),
    },
    releases: {
      timestamp: parseInt(localStorage.getItem('new_releases_check_timestamp') || '0') || null,
      age: getAge(localStorage.getItem('new_releases_check_timestamp')),
    },
    discounts: {
      timestamp: parseInt(localStorage.getItem('discounts_sync_timestamp') || '0') || null,
      age: getAge(localStorage.getItem('discounts_sync_timestamp')),
    },
  };
}
