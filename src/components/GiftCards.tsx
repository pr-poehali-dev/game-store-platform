import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';

const GIFT_CARD_AMOUNTS = [1000, 2000, 3000, 5000, 10000];

const GIFT_TEMPLATES = [
  {
    id: 'birthday',
    name: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
    icon: 'Cake',
    gradient: 'from-pink-500 to-rose-500',
  },
  {
    id: 'holiday',
    name: '–ü—Ä–∞–∑–¥–Ω–∏–∫',
    icon: 'Gift',
    gradient: 'from-red-500 to-orange-500',
  },
  {
    id: 'congratulation',
    name: '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ',
    icon: 'PartyPopper',
    gradient: 'from-purple-500 to-pink-500',
  },
  {
    id: 'thanks',
    name: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
    icon: 'Heart',
    gradient: 'from-blue-500 to-cyan-500',
  },
];

export const GiftCards = () => {
  const { toast } = useToast();
  const [isOpen, setIsOpen] = useState(false);
  const [selectedAmount, setSelectedAmount] = useState(3000);
  const [customAmount, setCustomAmount] = useState('');
  const [recipientEmail, setRecipientEmail] = useState('');
  const [recipientName, setRecipientName] = useState('');
  const [message, setMessage] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState('birthday');
  const [activateCode, setActivateCode] = useState('');

  const handleBuyGiftCard = () => {
    const amount = customAmount ? parseInt(customAmount) : selectedAmount;

    if (!recipientEmail || !recipientName) {
      toast({
        title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
        description: '–£–∫–∞–∂–∏—Ç–µ email –∏ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
        variant: 'destructive',
      });
      return;
    }

    if (amount < 500 || amount > 50000) {
      toast({
        title: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞',
        description: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 500‚ÇΩ –¥–æ 50,000‚ÇΩ',
        variant: 'destructive',
      });
      return;
    }

    toast({
      title: 'üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
      description: `${amount}‚ÇΩ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${recipientEmail}`,
    });
    setIsOpen(false);
  };

  const handleActivateCode = () => {
    if (!activateCode) {
      toast({
        title: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥',
        description: '–ö–æ–¥ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
        variant: 'destructive',
      });
      return;
    }

    toast({
      title: '‚úÖ –ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!',
      description: '3000‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å',
    });
    setActivateCode('');
  };

  const selectedTemplateData = GIFT_TEMPLATES.find(
    (t) => t.id === selectedTemplate
  );

  return (
    <div className="flex gap-2">
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogTrigger asChild>
          <Button variant="outline">
            <Icon name="Gift" size={18} className="mr-2" />
            –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã
          </Button>
        </DialogTrigger>
        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã</DialogTitle>
          </DialogHeader>

          <div className="space-y-6">
            <div
              className={`bg-gradient-to-br ${selectedTemplateData?.gradient} rounded-xl p-6 text-white relative overflow-hidden`}
            >
              <div className="absolute top-4 right-4 opacity-20">
                <Icon
                  name={selectedTemplateData?.icon as any}
                  size={100}
                />
              </div>
              <div className="relative">
                <div className="text-sm opacity-80 mb-2">
                  –ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞
                </div>
                <div className="text-4xl font-bold mb-4">
                  {customAmount || selectedAmount} ‚ÇΩ
                </div>
                <div className="text-sm">
                  <div>–î–ª—è: {recipientName || '–ü–æ–ª—É—á–∞—Ç–µ–ª—å'}</div>
                  <div className="opacity-80 mt-1">
                    {message || '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å'}
                  </div>
                </div>
              </div>
            </div>

            <div>
              <Label>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∑–∞–π–Ω</Label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mt-2">
                {GIFT_TEMPLATES.map((template) => (
                  <div
                    key={template.id}
                    className={`border-2 rounded-lg p-3 cursor-pointer transition-all ${
                      selectedTemplate === template.id
                        ? 'border-primary bg-primary/5'
                        : 'border-border hover:border-primary/50'
                    }`}
                    onClick={() => setSelectedTemplate(template.id)}
                  >
                    <div
                      className={`w-full aspect-video bg-gradient-to-br ${template.gradient} rounded-md flex items-center justify-center mb-2`}
                    >
                      <Icon
                        name={template.icon as any}
                        size={32}
                        className="text-white"
                      />
                    </div>
                    <div className="text-xs text-center font-medium">
                      {template.name}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <Label>–°—É–º–º–∞ –ø–æ–¥–∞—Ä–∫–∞</Label>
              <div className="grid grid-cols-3 gap-2 mt-2">
                {GIFT_CARD_AMOUNTS.map((amount) => (
                  <Button
                    key={amount}
                    variant={
                      selectedAmount === amount && !customAmount
                        ? 'default'
                        : 'outline'
                    }
                    onClick={() => {
                      setSelectedAmount(amount);
                      setCustomAmount('');
                    }}
                  >
                    {amount.toLocaleString('ru-RU')} ‚ÇΩ
                  </Button>
                ))}
              </div>
              <div className="mt-3">
                <Label className="text-sm text-muted-foreground">
                  –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É (500-50,000‚ÇΩ)
                </Label>
                <Input
                  type="number"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 7500"
                  value={customAmount}
                  onChange={(e) => setCustomAmount(e.target.value)}
                  className="mt-2"
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label>–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è</Label>
                <Input
                  placeholder="–ê–ª–µ–∫—Å–µ–π"
                  value={recipientName}
                  onChange={(e) => setRecipientName(e.target.value)}
                  className="mt-2"
                />
              </div>
              <div>
                <Label>Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è</Label>
                <Input
                  type="email"
                  placeholder="recipient@example.com"
                  value={recipientEmail}
                  onChange={(e) => setRecipientEmail(e.target.value)}
                  className="mt-2"
                />
              </div>
            </div>

            <div>
              <Label>–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</Label>
              <Textarea
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞..."
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                className="mt-2 min-h-[100px]"
                maxLength={500}
              />
              <div className="text-xs text-muted-foreground mt-1 text-right">
                {message.length}/500
              </div>
            </div>

            <div className="bg-muted/30 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <Icon name="Info" size={20} className="text-primary mt-0.5" />
                <div className="text-sm space-y-1">
                  <p>
                    ‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞
                    —É–∫–∞–∑–∞–Ω–Ω—ã–π email
                  </p>
                  <p>
                    ‚Ä¢ –ö–æ–¥ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –≥–æ–¥–∞ —Å –º–æ–º–µ–Ω—Ç–∞
                    –ø–æ–∫—É–ø–∫–∏
                  </p>
                  <p>
                    ‚Ä¢ –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å
                    –∫–æ—à–µ–ª—å–∫–∞
                  </p>
                </div>
              </div>
            </div>

            <div className="flex gap-3">
              <Button
                onClick={handleBuyGiftCard}
                className="flex-1"
                size="lg"
              >
                <Icon name="ShoppingCart" size={18} className="mr-2" />
                –ö—É–ø–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsOpen(false)}
                size="lg"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      <Dialog>
        <DialogTrigger asChild>
          <Button variant="outline">
            <Icon name="Ticket" size={18} className="mr-2" />
            –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
          </Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã</DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            <div>
              <Label>–ö–æ–¥ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã</Label>
              <Input
                placeholder="XXXX-XXXX-XXXX-XXXX"
                value={activateCode}
                onChange={(e) =>
                  setActivateCode(e.target.value.toUpperCase())
                }
                className="mt-2 font-mono"
                maxLength={19}
              />
            </div>

            <div className="bg-muted/30 rounded-lg p-4 text-sm text-muted-foreground">
              <Icon name="Info" size={16} className="inline mr-2" />
              –í–≤–µ–¥–∏—Ç–µ 16-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞ –∏–ª–∏ PDF-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            </div>

            <Button
              onClick={handleActivateCode}
              className="w-full"
              size="lg"
            >
              <Icon name="Check" size={18} className="mr-2" />
              –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};
