import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import { motion, AnimatePresence } from 'framer-motion';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'support';
  timestamp: Date;
  isTyping?: boolean;
}

export default function LiveChat() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –Ø –æ–Ω–ª–∞–π–Ω-–ø–æ–º–æ—â–Ω–∏–∫ GodStoreGame. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      sender: 'support',
      timestamp: new Date(),
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);
  const scrollRef = useRef<HTMLDivElement>(null);
  const [hasInteracted, setHasInteracted] = useState(false);

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [messages]);

  useEffect(() => {
    if (!isOpen && !hasInteracted) {
      const timer = setTimeout(() => {
        setUnreadCount(1);
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [isOpen, hasInteracted]);

  const quickReplies = [
    { text: '–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?', icon: 'CreditCard' },
    { text: '–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏', icon: 'Clock' },
    { text: '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤', icon: 'RefreshCw' },
    { text: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞', icon: 'Key' },
  ];

  const getAutoResponse = (userMessage: string): string => {
    const msg = userMessage.toLowerCase();
    
    if (msg.includes('–æ–ø–ª–∞—Ç') || msg.includes('–ø–ª–∞—Ç–∏—Ç—å') || msg.includes('—Ü–µ–Ω–∞')) {
      return '–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –°–ë–ü, Qiwi, –ÆMoney –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É. –û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω–∞! üí≥';
    }
    
    if (msg.includes('–¥–æ—Å—Ç–∞–≤–∫') || msg.includes('–ø–æ–ª—É—á') || msg.includes('–∫–æ–≥–¥–∞')) {
      return '–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã! ‚ö° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏–ª–∏ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.';
    }
    
    if (msg.includes('–≤–æ–∑–≤—Ä–∞—Ç') || msg.includes('–≤–µ—Ä–Ω—É—Ç—å') || msg.includes('–æ—Ç–º–µ–Ω')) {
      return '–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üîÑ';
    }
    
    if (msg.includes('–∞–∫—Ç–∏–≤') || msg.includes('–∫–ª—é—á') || msg.includes('–∫–æ–¥')) {
      return '–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞: –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –Ω–∞ –∫–æ–Ω—Å–æ–ª–∏ ‚Üí –ü–æ–≥–∞—Å–∏—Ç—å –∫–æ–¥ ‚Üí –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∏–∑ –ø–∏—Å—å–º–∞. –ì–æ—Ç–æ–≤–æ! üéÆ';
    }
    
    if (msg.includes('—Å–∫–∏–¥–∫') || msg.includes('–∞–∫—Ü–∏') || msg.includes('–ø—Ä–æ–º–æ')) {
      return '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞—Ç—å –æ —Å–∫–∏–¥–∫–∞—Ö –¥–æ 70%! –ü—Ä–æ–º–æ–∫–æ–¥ GAME10 –¥–∞—Å—Ç -10% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É! üéÅ';
    }

    if (msg.includes('–ø—Ä–æ–±–ª–µ–º') || msg.includes('–Ω–µ —Ä–∞–±–æ—Ç') || msg.includes('–æ—à–∏–±–∫')) {
      return '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å! –ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: support@godstore.game üìß';
    }

    if (msg.includes('–ø—Ä–∏–≤–µ—Ç') || msg.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤')) {
      return '–ü—Ä–∏–≤–µ—Ç! üëã –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!';
    }

    if (msg.includes('—Å–ø–∞—Å–∏–±–æ') || msg.includes('–±–ª–∞–≥–æ–¥–∞—Ä')) {
      return '–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üòä';
    }
    
    return '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: support@godstore.game –∏–ª–∏ –≤ Telegram @godstoregame üí¨';
  };

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    setHasInteracted(true);
    setUnreadCount(0);

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    setTimeout(() => {
      setIsTyping(false);
      const response = getAutoResponse(inputValue);
      const supportMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        sender: 'support',
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, supportMessage]);
    }, 1000 + Math.random() * 1000);
  };

  const handleQuickReply = (text: string) => {
    setInputValue(text);
    handleSendMessage();
  };

  const toggleChat = () => {
    setIsOpen(!isOpen);
    if (!isOpen) {
      setUnreadCount(0);
      setHasInteracted(true);
    }
  };

  return (
    <>
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            className="fixed bottom-24 right-4 z-50 w-[380px] max-h-[600px]"
          >
            <Card className="border-2 border-neon-purple/50 shadow-2xl shadow-neon-purple/20">
              <CardHeader className="bg-gradient-to-r from-neon-purple to-neon-pink p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="relative">
                      <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center">
                        <Icon name="Headphones" size={20} className="text-neon-purple" />
                      </div>
                      <div className="absolute bottom-0 right-0 w-3 h-3 bg-neon-green rounded-full border-2 border-white"></div>
                    </div>
                    <div>
                      <CardTitle className="text-white text-base">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</CardTitle>
                      <p className="text-xs text-white/80">–û–Ω–ª–∞–π–Ω ‚Ä¢ –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –∑–∞ –º–∏–Ω—É—Ç—É</p>
                    </div>
                  </div>
                  <Button 
                    variant="ghost" 
                    size="icon"
                    onClick={toggleChat}
                    className="text-white hover:bg-white/20 h-8 w-8"
                  >
                    <Icon name="X" size={18} />
                  </Button>
                </div>
              </CardHeader>

              <CardContent className="p-0">
                <ScrollArea className="h-[380px] p-4" ref={scrollRef}>
                  <div className="space-y-4">
                    {messages.map((message) => (
                      <motion.div
                        key={message.id}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div
                          className={`max-w-[75%] rounded-2xl px-4 py-2 ${
                            message.sender === 'user'
                              ? 'bg-gradient-to-r from-neon-purple to-neon-pink text-white'
                              : 'bg-muted text-foreground'
                          }`}
                        >
                          <p className="text-sm">{message.text}</p>
                          <p className={`text-xs mt-1 ${message.sender === 'user' ? 'text-white/70' : 'text-muted-foreground'}`}>
                            {message.timestamp.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                          </p>
                        </div>
                      </motion.div>
                    ))}
                    
                    {isTyping && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="flex justify-start"
                      >
                        <div className="bg-muted rounded-2xl px-4 py-3">
                          <div className="flex gap-1">
                            <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                            <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                            <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                          </div>
                        </div>
                      </motion.div>
                    )}
                  </div>
                </ScrollArea>

                {!hasInteracted && (
                  <div className="px-4 pb-3">
                    <p className="text-xs text-muted-foreground mb-2">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
                    <div className="grid grid-cols-2 gap-2">
                      {quickReplies.map((reply) => (
                        <Button
                          key={reply.text}
                          variant="outline"
                          size="sm"
                          onClick={() => handleQuickReply(reply.text)}
                          className="text-xs justify-start h-auto py-2"
                        >
                          <Icon name={reply.icon as any} size={12} className="mr-1" />
                          {reply.text}
                        </Button>
                      ))}
                    </div>
                  </div>
                )}

                <div className="border-t p-3">
                  <div className="flex gap-2">
                    <Input
                      value={inputValue}
                      onChange={(e) => setInputValue(e.target.value)}
                      onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                      className="flex-1"
                    />
                    <Button 
                      onClick={handleSendMessage}
                      className="bg-gradient-to-r from-neon-purple to-neon-pink hover:opacity-90"
                      size="icon"
                    >
                      <Icon name="Send" size={18} />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      <motion.div
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        className="fixed bottom-4 right-4 z-50"
      >
        <Button
          onClick={toggleChat}
          size="lg"
          className="h-16 w-16 rounded-full bg-gradient-to-r from-neon-purple to-neon-pink shadow-lg shadow-neon-purple/50 hover:shadow-neon-purple/70 transition-all relative"
        >
          {unreadCount > 0 && (
            <Badge className="absolute -top-1 -right-1 bg-red-500 text-white px-2 py-1 text-xs">
              {unreadCount}
            </Badge>
          )}
          {isOpen ? (
            <Icon name="X" size={24} />
          ) : (
            <Icon name="MessageCircle" size={24} />
          )}
        </Button>
      </motion.div>
    </>
  );
}
